.data
promedio: .word 0
nombre: .asciiz "Erick"
juan:     # Class Instance juan
    .asciiz "Erick"
    .word 20
    .asciiz "rojo"
    .word 3
i: .word 1
resultado: .word 0
STR_0: .asciiz "rojo"
STR_1: .asciiz "Hola, mi nombre es "
BUFFER: .space 200
STR_2: .asciiz "Ahora tengo "
STR_3: .asciiz "anios."
STR_4: .asciiz " esta estudiando en "
STR_5: .asciiz "grado."
STR_6: .asciiz "El promedio de "
STR_7: .asciiz " es "
STR_8: .asciiz "Erick"
STR_9: .asciiz " es par"
STR_10: .asciiz " es impar"
STR_11: .asciiz "Resultado de la expresion: "


.text
.globl main     # Entry point of the program
main:
load $t0, nombre    # Load data into register $t0
load $t1, STR_8    # Load data into register $t1
save $t0, $t1    # save data into register
load SELF, juan    # Load data into register SELF
load PARAM::nombre, $t0    # Load data into register PARAM::nombre
load PARAM::edad, 20    # Load data into register PARAM::edad
load PARAM::grado, 3    # Load data into register PARAM::grado
jal init_estudiante    # Jump and link to init_estudiante
load SELF, juan    # Load data into register SELF
jal saludar_estudiante    # Jump and link to saludar_estudiante
load SELF, juan    # Load data into register SELF
jal estudiar_estudiante    # Jump and link to estudiar_estudiante
load SELF, juan    # Load data into register SELF
load PARAM::anios, 5    # Load data into register PARAM::anios
jal incrementaredad_estudiante    # Jump and link to incrementaredad_estudiante
load $t0, i    # Load data into register $t0
load $t1, 1    # Load data into register $t1
save $t0, $t1    # save data into register
L0:
load $t0, i    # Load data into register $t0
load $t1, 5    # Load data into register $t1
slt $t2, $t0, $t1   # Save 1 if $t0 < $t1 else 0
beq $t2, $zero, L1    # Jump to L1 if equals
load $t0, i    # Load data into register $t0
load $t1, 2    # Load data into register $t1
div $t0, $t1
mfhi $t3    # Save the remainder (from HI register) into destination
load $t0, num    # Load data into register $t0
load $t1, 0    # Load data into register $t1
beq $t0, $t1, L2    # Jump to L2 if equals
bne $t0, $t1, L3    # Jump to L3 if not equals
L2:
load $t0, i    # Load data into register $t0
load $t1, STR_9    # Load data into register $t1
concat $t4, $t0, $t1    # Concatenation operation
load $a0, BUFFER   # Load string buffer to print into $a0
load $v0, 4     # Set mode to print 4
syscall  # Print the value
j L4    # Jump to L4
L3:
load $t4, i    # Load data into register $t4
load $t0, STR_10    # Load data into register $t0
concat $t1, $t4, $t0    # Concatenation operation
load $a0, BUFFER   # Load string buffer to print into $a0
load $v0, 4     # Set mode to print 4
syscall  # Print the value
L4:
load $t1, i    # Load data into register $t1
load $t4, 1    # Load data into register $t4
add $t0, $t1, $t4    # Addition operation
load $t1, i    # Load data into register $t1
save $t1, $t0    # save data into register
j L0    # Jump to L0
L1:
load $t1, edad    # Load data into register $t1
load $t0, 2    # Load data into register $t0
mult $t4, $t1, $t0    # Multiplication operation
load $t1, 5    # Load data into register $t1
load $t0, 3    # Load data into register $t0
sub $t5, $t1, $t0    # Subtraction operation
load $t1, 2    # Load data into register $t1
div $t5, $t1
mflo $t0    # Save the quotient (from LO register) into destination
add $t5, $t4, $t0    # Addition operation
load $t4, resultado    # Load data into register $t4
save $t4, $t5    # save data into register
load $t4, STR_11    # Load data into register $t4
load $t5, resultado    # Load data into register $t5
concat $t0, $t4, $t5    # Concatenation operation
load $a0, BUFFER   # Load string buffer to print into $a0
load $v0, 4     # Set mode to print 4
syscall  # Print the value
# End of program
li $v0, 10     # Set mode to exit
syscall       # Exit the program


init_persona:
load $s0, SELF::nombre    # Load data into register $s0
save $s0, $t0    # save data into register
load $t0, SELF::edad    # Load data into register $t0
load $t1, PARAM::edad    # Load data into register $t1
save $t0, $t1    # save data into register
load $t0, SELF::color    # Load data into register $t0
load $t1, STR_0    # Load data into register $t1
save $t0, $t1    # save data into register
jr $ra    # Return to caller
saludar_persona:
load $t0, STR_1    # Load data into register $t0
load $t1, SELF::nombre    # Load data into register $t1
concat $t2, $t0, $t1    # Concatenation operation
load $a0, BUFFER   # Load string buffer to print into $a0
load $v0, 4     # Set mode to print 4
syscall  # Print the value
jr $ra    # Return to caller
incrementaredad_persona:
load $t2, SELF::edad    # Load data into register $t2
load $t0, anios    # Load data into register $t0
add $t1, $t2, $t0    # Addition operation
load $t2, SELF::edad    # Load data into register $t2
save $t2, $t1    # save data into register
load $t2, STR_2    # Load data into register $t2
load $t1, SELF::edad    # Load data into register $t1
concat $t0, $t2, $t1    # Concatenation operation
load $t2, STR_3    # Load data into register $t2
concat $t1, $t0, $t2    # Concatenation operation
load $a0, BUFFER   # Load string buffer to print into $a0
load $v0, 4     # Set mode to print 4
syscall  # Print the value
jr $ra    # Return to caller
init_estudiante:
load PARAM::nombre, $t1    # Load data into register PARAM::nombre
load PARAM::edad, $t1    # Load data into register PARAM::edad
jal init_persona    # Jump and link to init_persona
load $t1, SELF::grado    # Load data into register $t1
save $t1, $t0    # save data into register
jr $ra    # Return to caller
estudiar_estudiante:
load $t1, SELF::nombre    # Load data into register $t1
load $t0, STR_4    # Load data into register $t0
concat $t2, $t1, $t0    # Concatenation operation
load $t1, SELF::grado    # Load data into register $t1
concat $t0, $t2, $t1    # Concatenation operation
load $t2, STR_5    # Load data into register $t2
concat $t1, $t0, $t2    # Concatenation operation
load $a0, BUFFER   # Load string buffer to print into $a0
load $v0, 4     # Set mode to print 4
syscall  # Print the value
jr $ra    # Return to caller
promedionotas_estudiante:
load $t1, nota1    # Load data into register $t1
load $t0, nota2    # Load data into register $t0
add $t2, $t1, $t0    # Addition operation
load $t1, nota3    # Load data into register $t1
add $t0, $t2, $t1    # Addition operation
load $t2, 3    # Load data into register $t2
div $t0, $t2
mflo $t1    # Save the quotient (from LO register) into destination
load $t0, promedio    # Load data into register $t0
save $t0, $t1    # save data into register
load $t0, STR_6    # Load data into register $t0
load $t1, SELF::nombre    # Load data into register $t1
concat $t2, $t0, $t1    # Concatenation operation
load $t0, STR_7    # Load data into register $t0
concat $t1, $t2, $t0    # Concatenation operation
load $t2, promedio    # Load data into register $t2
concat $t0, $t1, $t2    # Concatenation operation
load $a0, BUFFER   # Load string buffer to print into $a0
load $v0, 4     # Set mode to print 4
syscall  # Print the value
jr $ra    # Return to caller